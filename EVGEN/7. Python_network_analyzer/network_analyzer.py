# network_analyzer_final.py
from scapy.all import *
from scapy.layers.inet import IP, TCP, UDP, ICMP
from scapy.layers.l2 import ARP, Ether
from collections import defaultdict, deque
import time
import threading
import platform
import subprocess
import re

class NetworkAnalyzer:
    def __init__(self):
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π
        self.syn_count = defaultdict(lambda: deque(maxlen=100))
        self.arp_table = defaultdict(set)
        self.dhcp_requests = deque(maxlen=1000)
        self.port_scan_attempts = defaultdict(lambda: defaultdict(int))
        self.http_requests = deque(maxlen=100)
        self.fragmented_packets = deque(maxlen=100)
        self.icmp_packets = deque(maxlen=1000)
        
        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π
        self.thresholds = {
            'syn_flood': 20,      # SYN –ø–∞–∫–µ—Ç–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
            'port_scan': 15,      # –ø–æ—Ä—Ç–æ–≤ –∑–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
            'dhcp_starvation': 30, # DHCP –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
            'http_slow_dos': 5,   # –º–µ–¥–ª–µ–Ω–Ω—ã—Ö POST –∑–∞–ø—Ä–æ—Å–æ–≤
            'ip_fragmentation': 50, # —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
            'smurf_attack': 50,   # ICMP –ø–∞–∫–µ—Ç–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
        }
        
        self.running = False
        self.packet_count = 0
        
    def get_available_interfaces(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —Å –ø–æ–º–æ—â—å—é —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤"""
        print("üîç Searching for available interfaces...")
        interfaces = []
        
        # –ú–µ—Ç–æ–¥ 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º scapy.config.conf.ifaces
        try:
            if hasattr(conf, 'ifaces'):
                for iface_name, iface_obj in conf.ifaces.items():
                    interfaces.append({
                        'name': iface_name,
                        'description': str(iface_obj),
                        'ips': []
                    })
                print("‚úÖ Found interfaces via scapy.conf.ifaces")
        except Exception as e:
            print(f"   Scapy conf.ifaces error: {e}")
        
        # –ú–µ—Ç–æ–¥ 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º Windows –∫–æ–º–∞–Ω–¥—ã
        windows_interfaces = self._get_windows_interfaces()
        for iface in windows_interfaces:
            if iface not in [i['name'] for i in interfaces]:
                interfaces.append({
                    'name': iface,
                    'description': 'Windows network interface',
                    'ips': []
                })
        
        # –ú–µ—Ç–æ–¥ 3: Common –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã Windows
        common_interfaces = [
            "Ethernet", "Ethernet 7", "Wi-Fi", "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è —Å–µ—Ç—å", 
            "Local Area Connection", "Wireless Network Connection",
            "Ethernet 2", "Ethernet 3", "Ethernet 4", "Ethernet 5", "Ethernet 6"
        ]
        
        for iface in common_interfaces:
            if iface not in [i['name'] for i in interfaces]:
                interfaces.append({
                    'name': iface,
                    'description': 'Common Windows interface',
                    'ips': []
                })
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_interfaces = []
        seen_names = set()
        for iface in interfaces:
            if iface['name'] not in seen_names:
                unique_interfaces.append(iface)
                seen_names.add(iface['name'])
        
        # –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
        for iface in unique_interfaces:
            print(f"   üì° {iface['name']} - {iface['description']}")
        
        return unique_interfaces
    
    def _get_windows_interfaces(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —á–µ—Ä–µ–∑ Windows –∫–æ–º–∞–Ω–¥—ã"""
        interfaces = []
        
        try:
            # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
            result = subprocess.run(['netsh', 'interface', 'show', 'interface'], 
                                  capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0:
                lines = result.stdout.split('\n')
                for line in lines:
                    if 'Connected' in line or 'Disconnected' in line:
                        parts = line.split()
                        if len(parts) > 3:
                            # –ò—â–µ–º –∏–º—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–æ–±—ã—á–Ω–æ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏)
                            iface_name = ' '.join(parts[3:]).strip()
                            if iface_name and iface_name not in interfaces:
                                interfaces.append(iface_name)
        except:
            pass
        
        return interfaces
    
    def test_interface(self, interface_name):
        """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ö–≤–∞—Ç–∞ –ø–∞–∫–µ—Ç–æ–≤"""
        print(f"üß™ Testing interface: {interface_name}")
        
        try:
            # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            socket = conf.L3socket(iface=interface_name)
            socket.close()
            return True
        except:
            pass
        
        try:
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
            socket = conf.L3socket6(iface=interface_name)
            socket.close()
            return True
        except:
            pass
        
        return False
    
    def display_interfaces_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        interfaces = self.get_available_interfaces()
        
        if not interfaces:
            print("‚ùå No network interfaces found automatically.")
            print("üí° Trying manual interface selection...")
            return self._manual_interface_selection()
        
        print("\nüìã Available network interfaces:")
        print("=" * 60)
        
        for i, iface in enumerate(interfaces):
            status = "‚úÖ" if self.test_interface(iface['name']) else "‚ùå"
            print(f"{i+1}. {status} {iface['name']} - {iface['description']}")
        
        print("=" * 60)
        print("üí° Interfaces marked with ‚úÖ are likely to work")
        print("üí° Interfaces marked with ‚ùå may not work properly")
        
        while True:
            try:
                choice = input("\nüéØ Select interface by number, type interface name, or 'scan' to rescan: ").strip()
                
                if choice.lower() == 'scan':
                    return self.display_interfaces_menu()
                
                if choice.isdigit():
                    # –í—ã–±–æ—Ä –ø–æ –Ω–æ–º–µ—Ä—É
                    choice_num = int(choice)
                    if 1 <= choice_num <= len(interfaces):
                        selected_iface = interfaces[choice_num - 1]['name']
                        if self.test_interface(selected_iface):
                            print(f"‚úÖ Selected interface: {selected_iface}")
                            return selected_iface
                        else:
                            print(f"‚ö†Ô∏è Interface {selected_iface} may not work properly.")
                            continue_option = input("üí° Do you want to try anyway? (y/n): ").strip().lower()
                            if continue_option == 'y':
                                return selected_iface
                    else:
                        print(f"‚ùå Please enter a number between 1 and {len(interfaces)}")
                
                else:
                    # –ü—Ä—è–º–æ–π –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                    if choice:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ —Å–ø–∏—Å–∫–µ
                        iface_names = [iface['name'] for iface in interfaces]
                        if choice in iface_names:
                            if self.test_interface(choice):
                                print(f"‚úÖ Selected interface: {choice}")
                                return choice
                            else:
                                print(f"‚ö†Ô∏è Interface {choice} may not work properly.")
                                continue_option = input("üí° Do you want to try anyway? (y/n): ").strip().lower()
                                if continue_option == 'y':
                                    return choice
                        else:
                            print(f"‚ùå Interface '{choice}' not found in available interfaces.")
                            print("üí° Available interfaces:", ", ".join(iface_names))
                            continue_option = input("üí° Do you want to try anyway? (y/n): ").strip().lower()
                            if continue_option == 'y':
                                print(f"‚ö†Ô∏è Trying interface: {choice}")
                                return choice
                
            except KeyboardInterrupt:
                print("\n‚èπÔ∏è Selection cancelled.")
                return None
            except Exception as e:
                print(f"‚ùå Error: {e}")
                continue
    
    def _manual_interface_selection(self):
        """–†—É—á–Ω–æ–π –≤—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        print("\nüîß Manual interface selection")
        print("üí° Common Windows interfaces: Ethernet, Wi-Fi, Ethernet 7, etc.")
        
        common_interfaces = [
            "Ethernet", "Ethernet 7", "Wi-Fi", "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è —Å–µ—Ç—å",
            "Local Area Connection", "Wireless Network Connection"
        ]
        
        print("üí° Try these common names:")
        for i, iface in enumerate(common_interfaces, 1):
            print(f"   {i}. {iface}")
        
        while True:
            try:
                iface_name = input("\nüéØ Enter interface name (or 'quit' to exit): ").strip()
                
                if iface_name.lower() == 'quit':
                    return None
                
                if iface_name:
                    print(f"üß™ Testing interface: {iface_name}")
                    if self.test_interface(iface_name):
                        print(f"‚úÖ Interface {iface_name} seems to work!")
                        return iface_name
                    else:
                        print(f"‚ö†Ô∏è Interface {iface_name} may not work properly.")
                        continue_option = input("üí° Try anyway? (y/n): ").strip().lower()
                        if continue_option == 'y':
                            return iface_name
                
            except KeyboardInterrupt:
                return None
            except Exception as e:
                print(f"‚ùå Error: {e}")
                continue
    
    def start_monitoring(self, interface_name=None):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ç–∏"""
        if not interface_name:
            interface_name = self.display_interfaces_menu()
            if not interface_name:
                print("‚ùå No interface selected. Exiting.")
                return False
            
        print(f"üéØ Using interface: {interface_name}")
        self.running = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        cleaner_thread = threading.Thread(target=self._clean_old_data)
        cleaner_thread.daemon = True
        cleaner_thread.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_thread = threading.Thread(target=self._show_stats)
        stats_thread.daemon = True
        stats_thread.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã
        self._start_test_traffic()
        
        try:
            print("üöÄ Starting packet capture...")
            print("üì° Monitoring network traffic... Press Ctrl+C to stop\n")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∑–∞—Ö–≤–∞—Ç–∞
            try:
                # –ú–µ—Ç–æ–¥ 1: –û–±—ã—á–Ω—ã–π sniff
                sniff(prn=self._packet_handler, iface=interface_name, store=0, timeout=0.1)
            except:
                try:
                    # –ú–µ—Ç–æ–¥ 2: –° L3socket
                    conf.L3socket = conf.L3socket6
                    sniff(prn=self._packet_handler, iface=interface_name, store=0, timeout=0.1)
                except:
                    # –ú–µ—Ç–æ–¥ 3: –ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                    print("‚ö†Ô∏è Trying without specific interface...")
                    sniff(prn=self._packet_handler, store=0, timeout=0.1)
            
        except Exception as e:
            print(f"‚ùå Capture error: {e}")
            print("üí° Possible solutions:")
            print("   1. Make sure Npcap is installed: https://npcap.com/#download")
            print("   2. Try running as Administrator")
            print("   3. Try a different interface name")
            return False
            
        return True
    
    def _start_test_traffic(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        def send_test_packets():
            time.sleep(2)
            print("üß™ Sending test packets for demonstration...")
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
                for i in range(5):
                    packet = IP(dst="8.8.8.8")/TCP(dport=80, flags="S")
                    send(packet, verbose=0)
                    time.sleep(0.5)
                print("‚úÖ Test packets sent\n")
            except:
                print("‚ö†Ô∏è Could not send test packets\n")
        
        test_thread = threading.Thread(target=send_test_packets)
        test_thread.daemon = True
        test_thread.start()
    
    def _clean_old_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        while self.running:
            time.sleep(60)
            current_time = time.time()
            
            for src_ip in list(self.port_scan_attempts.keys()):
                for port in list(self.port_scan_attempts[src_ip].keys()):
                    if current_time - self.port_scan_attempts[src_ip][port] > 300:
                        del self.port_scan_attempts[src_ip][port]
    
    def _show_stats(self):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        while self.running:
            time.sleep(15)
            if self.packet_count > 0:
                self.print_stats()
    
    def _packet_handler(self, packet):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–∂–¥–æ–≥–æ –ø–∞–∫–µ—Ç–∞"""
        self.packet_count += 1
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 –ø–∞–∫–µ—Ç–æ–≤
        if self.packet_count % 100 == 0:
            print(f"üì¶ Processed {self.packet_count} packets...")
        
        try:
            # –ê–Ω–∞–ª–∏–∑ IP –ø–∞–∫–µ—Ç–æ–≤
            if packet.haslayer(IP):
                self._analyze_ip(packet)
            
            # –ê–Ω–∞–ª–∏–∑ TCP
            if packet.haslayer(TCP):
                self._analyze_tcp(packet)
            
            # –ê–Ω–∞–ª–∏–∑ UDP
            if packet.haslayer(UDP):
                self._analyze_udp(packet)
            
            # –ê–Ω–∞–ª–∏–∑ ICMP
            if packet.haslayer(ICMP):
                self._analyze_icmp(packet)
            
            # –ê–Ω–∞–ª–∏–∑ ARP
            if packet.haslayer(ARP):
                self._analyze_arp(packet)
                
        except Exception as e:
            if self.packet_count % 500 == 0:
                print(f"‚ö†Ô∏è Packet processing error: {e}")
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    def _analyze_ip(self, packet):
        """–ê–Ω–∞–ª–∏–∑ IP –ø–∞–∫–µ—Ç–æ–≤"""
        ip = packet[IP]
        current_time = time.time()
        
        if hasattr(ip, 'flags') and ip.flags == 1:
            self.fragmented_packets.append(current_time)
            self._check_ip_fragmentation_attack()
    
    def _analyze_tcp(self, packet):
        """–ê–Ω–∞–ª–∏–∑ TCP –ø–∞–∫–µ—Ç–æ–≤"""
        if packet.haslayer(IP) and packet.haslayer(TCP):
            ip = packet[IP]
            tcp = packet[TCP]
            current_time = time.time()
            src_ip = ip.src
            
            if hasattr(tcp, 'flags') and tcp.flags == 0x02:
                self.syn_count[src_ip].append(current_time)
                self._check_syn_flood(src_ip)
            
            if hasattr(tcp, 'flags') and tcp.flags in [0x02, 0x01, 0x20, 0x08]:
                self.port_scan_attempts[src_ip][tcp.dport] = current_time
                self._check_port_scan(src_ip)
            
            if tcp.dport == 80 or tcp.sport == 80:
                if packet.haslayer(Raw):
                    try:
                        raw_data = str(packet[Raw].load)
                        if "POST" in raw_data or "GET" in raw_data:
                            self.http_requests.append((current_time, len(raw_data)))
                            self._check_http_slow_dos()
                    except:
                        pass
    
    def _analyze_udp(self, packet):
        """–ê–Ω–∞–ª–∏–∑ UDP –ø–∞–∫–µ—Ç–æ–≤"""
        if packet.haslayer(IP) and packet.haslayer(UDP):
            ip = packet[IP]
            udp = packet[UDP]
            src_ip = ip.src
            
            self.port_scan_attempts[src_ip][udp.dport] = time.time()
            self._check_port_scan(src_ip)
            
            if udp.sport == 68 and udp.dport == 67:
                self.dhcp_requests.append(time.time())
                self._check_dhcp_starvation()
    
    def _analyze_icmp(self, packet):
        """–ê–Ω–∞–ª–∏–∑ ICMP –ø–∞–∫–µ—Ç–æ–≤"""
        if packet.haslayer(IP):
            current_time = time.time()
            self.icmp_packets.append(current_time)
            self._check_smurf_attack()
    
    def _analyze_arp(self, packet):
        """–ê–Ω–∞–ª–∏–∑ ARP –ø–∞–∫–µ—Ç–æ–≤"""
        arp = packet[ARP]
        
        if arp.op == 2:
            self._check_arp_spoofing(arp)
        
        if arp.op == 2 and arp.psrc == arp.pdst:
            self._check_gratuitous_arp(arp)
    
    def _check_syn_flood(self, src_ip):
        window = 1
        current_time = time.time()
        syn_in_window = sum(1 for timestamp in self.syn_count[src_ip] 
                           if current_time - timestamp < window)
        if syn_in_window > self.thresholds['syn_flood']:
            print(f"üö® SYN Flood detected from {src_ip}: {syn_in_window} SYN packets in {window} second")
    
    def _check_port_scan(self, src_ip):
        current_time = time.time()
        window = 10
        recent_ports = [port for port, timestamp in self.port_scan_attempts[src_ip].items()
                       if current_time - timestamp < window]
        if len(recent_ports) > self.thresholds['port_scan']:
            print(f"üö® Port Scan detected from {src_ip}: {len(recent_ports)} ports scanned in {window} seconds")
    
    def _check_dhcp_starvation(self):
        window = 1
        current_time = time.time()
        dhcp_in_window = sum(1 for timestamp in self.dhcp_requests 
                            if current_time - timestamp < window)
        if dhcp_in_window > self.thresholds['dhcp_starvation']:
            print(f"üö® DHCP Starvation detected: {dhcp_in_window} DHCP requests in {window} second")
    
    def _check_http_slow_dos(self):
        window = 10
        current_time = time.time()
        slow_requests = sum(1 for timestamp, size in self.http_requests 
                           if current_time - timestamp < window and size < 100)
        if slow_requests > self.thresholds['http_slow_dos']:
            print(f"üö® HTTP Slow POST DoS detected: {slow_requests} slow requests in {window} seconds")
    
    def _check_ip_fragmentation_attack(self):
        window = 1
        current_time = time.time()
        fragmented_in_window = sum(1 for timestamp in self.fragmented_packets 
                                  if current_time - timestamp < window)
        if fragmented_in_window > self.thresholds['ip_fragmentation']:
            print(f"üö® IP Fragmentation Attack detected: {fragmented_in_window} fragmented packets in {window} second")
    
    def _check_smurf_attack(self):
        window = 1
        current_time = time.time()
        icmp_in_window = sum(1 for timestamp in self.icmp_packets 
                            if current_time - timestamp < window)
        if icmp_in_window > self.thresholds['smurf_attack']:
            print(f"üö® Smurf Attack detected: {icmp_in_window} ICMP packets in {window} second")
    
    def _check_arp_spoofing(self, arp_packet):
        ip = arp_packet.psrc
        mac = arp_packet.hwsrc
        if ip in self.arp_table:
            if mac not in self.arp_table[ip]:
                print(f"üö® ARP Spoofing detected: IP {ip} was {self.arp_table[ip]}, now claiming to be {mac}")
        else:
            self.arp_table[ip].add(mac)
    
    def _check_gratuitous_arp(self, arp_packet):
        print(f"üö® Gratuitous ARP detected from {arp_packet.hwsrc} for IP {arp_packet.psrc}")
    
    def print_stats(self):
        """–í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        print(f"\nüìä Statistics - Packets processed: {self.packet_count}")
        print(f"   Active hosts: {len(self.syn_count)}")
        print(f"   Port scan attempts: {sum(len(ports) for ports in self.port_scan_attempts.values())}")
        print("---")
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.running = False
        print("\nüõë Monitoring stopped")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("=== üõ°Ô∏è Network Security Analyzer ===")
    print("üîß Final version with improved interface detection")
    print("üí° Please run as Administrator for best results")
    print("-" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        import ctypes
        if not ctypes.windll.shell32.IsUserAnAdmin():
            print("‚ö†Ô∏è Warning: Not running as Administrator!")
            print("üí° Some features may not work properly")
    except:
        pass
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = NetworkAnalyzer()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if analyzer.start_monitoring():
            print("‚úÖ Monitoring started successfully!")
        else:
            print("‚ùå Failed to start monitoring")
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Program interrupted by user")
    except Exception as e:
        print(f"‚ùå Fatal error: {e}")
    finally:
        analyzer.stop_monitoring()
        print("üëã Thank you for using Network Security Analyzer!")

if __name__ == "__main__":
    main()